name: release

on: 
  push:
    branches:
      - main

jobs:
  tag-next-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_next_version.outputs.version }}
      hasNextVersion: ${{ steps.get_next_version.outputs.hasNextVersion }}
    permissions:
      contents: write
    steps:
    - name: Checkout
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      with:
        fetch-depth: '0'
    - name: Get next version
      id: get_next_version
      uses: thenativeweb/get-next-version@main
      with:
        prefix: 'v'
    - name: Create tag
      if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
      run: |
        git tag ${{ steps.get_next_version.outputs.version }}
        git push origin ${{ steps.get_next_version.outputs.version }}


  build-gh-release:
    needs: tag-next-version
    if: ${{ needs.tag-next-version.outputs.hasNextVersion == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
    - name: go vorbereiten
      uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5
      with:
        go-version: '1.21.5'
    - name: Build
      env:
        KTMPL_VERSION: ${{ needs.tag-next-version.outputs.version }}
      run: |
        mkdir -p release/assets
        go mod download
        
        GOOS=linux GOARCH=amd64 go build -ldflags "-X \"main.ktmplVersion=${KTMPL_VERSION}\" -X \"main.compileDate=$(date)\"" -o release/ktmpl-linux-amd64
        tar cvfJ release/assets/ktmpl-linux-amd64.tar.xz release/ktmpl-linux-amd64

        GOOS=linux GOARCH=arm64 go build -ldflags "-X \"main.ktmplVersion=${KTMPL_VERSION}\" -X \"main.compileDate=$(date)\"" -o release/ktmpl-linux-arm64
        tar cvfJ release/assets/ktmpl-linux-arm64.tar.xz release/ktmpl-linux-arm64

        GOOS=windows GOARCH=amd64 go build -ldflags "-X \"main.ktmplVersion=${KTMPL_VERSION}\" -X \"main.compileDate=$(date)\"" -o release/ktmpl-windows-amd64.exe
        zip release/assets/ktmpl-windows-amd64.zip release/ktmpl-windows-amd64.exe

        GOOS=windows GOARCH=arm64 go build -ldflags "-X \"main.ktmplVersion=${KTMPL_VERSION}\" -X \"main.compileDate=$(date)\"" -o release/ktmpl-windows-arm64.exe
        zip release/assets/ktmpl-windows-arm64.zip release/ktmpl-windows-arm64.exe

        GOOS=darwin GOARCH=amd64 go build -ldflags "-X \"main.ktmplVersion=${KTMPL_VERSION}\" -X \"main.compileDate=$(date)\"" -o release/ktmpl-darwin-amd64
        tar cvfJ release/assets/ktmpl-darwin-amd64.tar.xz release/ktmpl-darwin-amd64

        GOOS=darwin GOARCH=arm64 go build -ldflags "-X \"main.ktmplVersion=${KTMPL_VERSION}\" -X \"main.compileDate=$(date)\"" -o release/ktmpl-darwin-arm64
        tar cvfJ release/assets/ktmpl-darwin-arm64.tar.xz release/ktmpl-darwin-arm64

    - name: Github-Release erstellen
      uses: ncipollo/release-action@2c591bcc8ecdcd2db72b97d6147f871fcd833ba5 # v1
      with:
        artifacts: "release/assets/*"
        tag: ${{ needs.tag-next-version.outputs.version }}

        
  build-docker:
    needs: tag-next-version
    if: ${{ needs.tag-next-version.outputs.hasNextVersion == 'true' }}
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3
      - uses: docker/setup-buildx-action@aa33708b10e362ff993539393ff100fa93ed6a27 # v3

      - uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
        with:
          username: ${{ secrets.REG_USER }}
          password: ${{ secrets.REG_PASS }}

      - uses: docker/build-push-action@5176d81f87c23d6fc96624dfdbcd9f3830bbe445 # v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: KTMPL_VERSION=${{ needs.tag-next-version.outputs.version }}
          tags: ${{ secrets.REG_USER }}/kdeploy:${{ needs.tag-next-version.outputs.version }},${{ secrets.REG_USER }}/kdeploy:latest
